<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="intro">
  <title>Introducing Jenkins</title>
  <sect1 id="I_sect11_d1e536">
    <title>Introduction</title>
    <para>Continuous Integration, also known as <indexterm class="startofrange" id="ch01-ci" significance="normal"><primary>CI (Continuous Integration)</primary></indexterm><indexterm id="I_indexterm1_d1e544" significance="normal"><primary>Continuous Integration</primary><see>CI</see></indexterm>CI, is a cornerstone of modern software development. In fact,
    it's a real game changer. Introducing CI into
    an organization radically alters the way teams think about the whole
    development process. CI has the potential to enable and trigger a series
    of incremental process improvements, going from a simple scheduled
    automated build right through to continuous delivery into production. A
    good CI infrastructure can streamline the development process,
    help detect and fix bugs faster, provide a useful
    project dashboard for both developers and non-developers, and, ultimately,
    help teams deliver more real value to the end user. Every
    professional development team, no matter how small, should be practicing
    CI.</para>
  </sect1>
  <sect1 id="intro-sect-intro">
    <title>Continuous Integration Fundamentals</title>
    <para>Back in the days of waterfall projects and Gantt charts, before the
    introduction of CI practices, development team time and energy was
    regularly drained in the period leading up to a release by what was known
    as the Integration Phase. During this phase, the code changes made by
    individual developers or small teams were brought together piecemeal and
    forged into a working product. This was hard work, sometimes involving the
    integration of months of conflicting changes. It was very hard to
    anticipate the types of issues that would crop up, and even harder to fix
    them. Doing so could require reworking code that had been written weeks or
    months before. This painful process, fraught with risk and danger, often
    lead to significant delivery delays, unplanned costs, and, as a result,
    unhappy clients. CI was born to address these
    issues.</para>
    <para>CI, in its simplest form, is a tool that
    monitors your version control system for changes. Whenever a change is
    detected, this tool automatically compiles and tests your application. If
    something goes wrong, the tool immediately notifies the developers so that
    they can fix the issue immediately.</para>
    <para>But CI Integration can do much more than this. CI
    can also help you keep tabs on the health of your code base,
    automatically monitoring code quality and code coverage metrics, and
    helping keep technical conflicts and maintenance costs low.
    Publicly-visible code quality metrics can also encourage developers to
    take pride in the quality of their code and strive to improve it. Combined
    with automated end-to-end acceptance tests, CI can also act as a
    communication tool, publishing a clear picture of the current state of
    development efforts. Finally, it can simplify and accelerate delivery by
    helping automate the deployment process, letting you deploy the latest
    version of your application either automatically or as a one-click
    process.</para>
    <para>In essence, CI is about reducing risk by
    providing faster feedback. First and foremost, it helps
    identify and fix integration and regression issues faster, resulting in
    smoother, quicker delivery, and fewer bugs. By providing better visibility
    for both technical and non-technical team members on the state of the
    project, CI can open and facilitate communication
    channels between team members and encourage collaborative problem solving
    and process improvement. By automating the deployment process,
    CI helps get your software into the hands of the
    testers and the end users faster, more reliably, and with less
    effort.</para>
    <para>This idea of automated deployment is important. Indeed, if you take
    automating the deployment process to its logical conclusion, you could
    push every build that passes the necessary automated tests into
    production. The practice of automatically deploying every successful build
    directly into production is generally known as<indexterm id="I_indexterm1_d1e563" significance="normal"><primary>continuous deployment</primary></indexterm> <emphasis>Continuous <phrase role="keep-together">Deployment</phrase></emphasis>.</para>
    <para>However, a pure Continuous Deployment approach isn't always
    appropriate. For example, many users would not appreciate new
    versions falling into their laps several times a week, and prefer a more
    predictable (and transparent) release cycle. Commercial and marketing
    considerations might also play a role in deciding when a new release should
    actually be deployed.</para>
    <para>The notion of <emphasis><indexterm id="I_indexterm1_d1e577" significance="normal"><primary>continuous delivery</primary></indexterm>Continuous Delivery</emphasis> is a slight variation on the
    idea of Continuous Deployment that takes these considerations into account.
    With Continuous Delivery, any and every successful build
    that has passed all the relevant automated tests and quality gates can
    <emphasis>potentially</emphasis> be deployed into production via a fully
    automated one-click <phrase role="keep-together">process</phrase>, and be
    in the hands of the end-user within minutes. However, the process isn't
    automatic: it's the business, rather than IT, that decides the best time
    to deliver the latest changes.</para>
    <?dbfo-need height=”1in”?>
    <para>So, CI techniques, and in particular Continuous
    Deployment and Continuous Delivery, are very much about providing value to
    the end user faster. How long does it take your team to get a small code
    change out to production? How much of this process involves problems that
    could have been fixed earlier, had you known about the code changes that
    Joe down the corridor was making? How much is taken up by labor-intensive
    manual testing by QA teams? How much involves manual deployment steps, the
    secrets of which are known only to a select few? CI isn't a silver bullet
    by any means, but it can certainly help streamline many of these
    problems.</para>
    <para>But CI is a mindset as much as a toolset. To get
    the most out of CI, a team needs to adopt a CI mentality. For example,
    your projects must have reliable, repeatable, and automated build and deployment
    processes, involving no human intervention. Fixing broken builds should take
    an absolute priority, and never be left to stagnate. 
    And since the trust
    you place in your CI server depends to a great extent on the quality of
    your tests, the team needs to place a very strong emphasis on high quality
    tests and testing practices.</para>
    <para>In this book we'll be looking at how to implement a robust and
    comprehensive CI solution using Jenkins<indexterm id="I_indexterm1_d1e596" class="endofrange" startref="ch01-ci" significance="normal"><primary/></indexterm> or Hudson.</para>
  </sect1>
  <sect1 id="intro-sect-introducing-jenkins">
    <title>Introducing Jenkins (né Hudson)</title>
    <para>Jenkins, <indexterm class="startofrange" id="ch01-jenkins" significance="normal"><primary>Jenkins</primary></indexterm>originally called <indexterm id="I_indexterm1_d1e608" significance="normal"><primary>Hudson</primary><seealso>Jenkins</seealso></indexterm>Hudson, is an open source CI tool
    written in Java. Boasting a dominant market share, Jenkins is used by
    teams of all sizes for projects in a wide variety of languages and
    technologies, including .NET, Ruby, Groovy, Grails, PHP, and more, as well
    as Java. So, what made Jenkins such a success and why use Jenkins for
    your CI infrastructure?</para>
    <para>Firstly, Jenkins is easy to use. The user interface is simple,
    intuitive, and visually appealing, and Jenkins as a whole has a very low
    learning curve. As you'll see in the next chapter, you can get started
    with Jenkins in a matter of minutes.</para>
    <para>However, Jenkins doesn't sacrifice power or extensibility: it's
    also extremely flexible and easy to adapt to your own purposes. Hundreds
    of open source plugins are available, with more coming out every week.
    These plugins cover everything from version control systems, build tools,
    code quality metrics, build notifiers, integration with external systems,
    UI customization, games, and much more. Installing them is quick and
    easy.</para>
    <para>Last, but certainly not least, much of Jenkins’s popularity comes
    from the size <phrase role="keep-together">and</phrase> vibrancy of its
    community. The Jenkins community is a large, dynamic, reactive, <phrase role="keep-together">and welcoming</phrase> bunch, with passionate
    champions, active mailing lists, IRC channels, and a very vocal blog and
    twitter account. The development pace is fast, with releases coming out
    weekly with the latest new features, bug fixes, and plugin updates.</para>
    <para>However, Jenkins also caters to users who aren't comfortable with
    upgrading on a weekly basis. For those who prefer a less-hectic release
    pace, there's also a Long-term Support, or <indexterm id="I_indexterm1_d1e628" significance="normal"><primary>LTS (Long-Term Support) releases</primary></indexterm>LTS, release line that lags behind the latest release in
    favor of more stability and a slower rate of change. New LTS releases come
    out every three months or so, with important bug fixes being backported.
    This concept is similar to the Ubuntu LTS <phrase role="keep-together">releases</phrase>.</para>
  </sect1>
  <sect1 id="intro-sect-history">
    <title>From Hudson to Jenkins—A Short History</title>
    <para>Jenkins<indexterm class="startofrange" id="ch01-history" significance="normal"><primary>Jenkins</primary><secondary>history of</secondary></indexterm> is the result of one visionary developer, <indexterm id="I_indexterm1_d1e646" significance="normal"><primary>Kawaguchi, Kohsuke (developer of Hudson)</primary></indexterm>Kohsuke Kawaguchi, who started the project as a hobby
    under the name of <indexterm id="I_indexterm1_d1e650" significance="normal"><primary>Hudson</primary></indexterm>Hudson in late 2004 whilst working at Sun. As Hudson evolved
    over the years, it was adopted by more and more teams within Sun for their
    own projects. By early 2008, Sun recognized the quality and value of the
    tool, and asked Kohsuke to work on Hudson full-time to provide
    professional services and support. By 2010, Hudson had
    become the leading CI solution with a market share of
    over 70%.</para>
    <para>In 2009, Oracle purchased Sun. Towards the end of 2010, tensions
    arose between the Hudson developer community and Oracle, initially
    triggered by problems with the Java.net infrastructure, and aggravated by
    issues related to Oracle’s claim to the Hudson trademark. These tensions
    also reflected strong underlying disagreements about the way the project
    was being managed by Oracle. Indeed, Oracle wanted to move towards a more
    strictly controlled development process with a slower release schedule,
    whereas most of the core Hudson developers, led by Kohsuke, preferred to
    continue with the open, flexible, and fast-paced community-focused model
    that had worked so well for Hudson in the past.</para>
    <para>In January 2011, the Hudson developer community decisively voted to
    rename the project to Jenkins. They subsequently migrated the original
    Hudson code base to a new <indexterm id="I_indexterm1_d1e658" significance="normal"><primary>GitHub project</primary></indexterm><ulink url="https://github.com/jenkinsci">GitHub
    project</ulink> and continued their work there. The vast majority of core
    and plugin developers broke away and followed Kohsuke Kawaguchi and other
    core contributors to the Jenkins camp, where the bulk of the development
    activity can be seen today.</para>
    <para>After the fork, a majority of users also followed the Jenkins
    developer community and switched to Jenkins. At the time of writing, polls
    show that some 75% of Hudson users had switched to Jenkins, while 13% were
    still using Hudson, and another 12% were using both Hudson and Jenkins or were
    in the process of migrating to Jenkins.</para>
    <para>Nevertheless, Oracle and Sonatype (the company behind Maven and
    Nexus) have continued to work on the Hudson code base (now also hosted on
    GitHub at <ulink url="https://github.com/hudson"/>), but with a
    very different focus. Indeed, the <indexterm id="I_indexterm1_d1e670" significance="normal"><primary>Sonatype tools</primary></indexterm>Sonatype developers have concentrated on major underlying
    infrastructure changes around, among other areas, Maven integration, the
    dependency injection framework, and the plugin <indexterm id="I_indexterm1_d1e674" class="endofrange" startref="ch01-jenkins" significance="normal"><primary/></indexterm><indexterm id="I_indexterm1_d1e676" class="endofrange" startref="ch01-history" significance="normal"><primary/></indexterm>architecture.</para>
  </sect1>
  <sect1 id="intro-sect-jenkins-or-hudson">
    <title>Should I Use Jenkins or Hudson?</title>
    <para>So, should<indexterm id="I_indexterm1_d1e684" significance="normal"><primary>Jenkins</primary><secondary>reasons to use</secondary></indexterm> you use Jenkins or Hudson? Since this is a book on Jenkins,
    here are a few reasons why you might want to opt for Jenkins:</para>
    <itemizedlist>
      <listitem>
        <para><emphasis>Jenkins is the new Hudson.</emphasis> In fact, Jenkins
        is simply the old Hudson with a new name, so if you liked Hudson,
        you’ll like Jenkins! Jenkins uses the Hudson code base, and the
        development team and project philosophy remain the same. In a
        nutshell, the original developers, who wrote the vast majority of the
        Hudson core, simply resumed business as usual after the fork working
        on the Jenkins project.</para>
      </listitem>
      <listitem>
        <para><emphasis>The Jenkins <indexterm id="I_indexterm1_d1e700" significance="normal"><primary>Jenkins</primary><secondary>community for</secondary></indexterm>community</emphasis>. Like many of the more successful
        <indexterm id="I_indexterm1_d1e707" significance="normal"><primary>Jenkins</primary><secondary sortas="Open Source">as Open Source project</secondary></indexterm>Open Source projects, much of Hudson’s strength came
        from its large and dynamic community, and its massive adoption. Bugs
        are identified (and generally fixed) much more rapidly, and, if you
        have a problem, chances are someone else will have had them too! If you
        run into trouble, post a question on the mailing list or IRC
        channel—there’s sure to be someone who can help.</para>
      </listitem>
      <listitem>
        <para><emphasis>The fast <indexterm id="I_indexterm1_d1e717" significance="normal"><primary>Jenkins</primary><secondary>rapid release cycle of</secondary></indexterm>development pace</emphasis>. Jenkins continues the rapid
        release cycles that typified Hudson, which many developers love. New
        features, plugins, and bug fixes come out weekly, and the
        turn-around time for bug fixes can be very short indeed. And, if you
        prefer more stability, there are always the LTS releases</para>
      </listitem>
    </itemizedlist>
    <para>And, <indexterm id="I_indexterm1_d1e726" significance="normal"><primary>Hudson</primary></indexterm>in the interest of balance, here are some reasons you might
    prefer to stick with Hudson:</para>
    <itemizedlist>
      <listitem>
        <para><emphasis>If it ain’t broke, don’t fix it.</emphasis> You
        already have a Hudson installation that you're happy with, and don’t
        feel the need to upgrade to the latest version.</para>
      </listitem>
      <listitem>
        <para><emphasis>Enterprise integration and <indexterm id="I_indexterm1_d1e740" significance="normal"><primary>Sonatype tools</primary></indexterm>Sonatype tools.</emphasis> Hudson is likely to place a
        strong emphasis on integration with enterprise tools such as
        <indexterm id="I_indexterm1_d1e745" significance="normal"><primary>LDAP/Active Directory</primary></indexterm>LDAP/Active Directory, and the Sonatype products such as
        <indexterm id="I_indexterm1_d1e749" significance="normal"><primary>Maven</primary><secondary>Hudson support for</secondary></indexterm>Maven 3, <indexterm id="I_indexterm1_d1e755" significance="normal"><primary>Nexus</primary><secondary>Hudson support for</secondary></indexterm>Nexus, and <indexterm id="I_indexterm1_d1e761" significance="normal"><primary>M2Eclipse</primary></indexterm>M2Eclipse, whereas Jenkins is more open to other
        competing tools such as <indexterm id="I_indexterm1_d1e765" significance="normal"><primary>Artifactory</primary><secondary>Jenkins support for</secondary></indexterm>Artifactory and <indexterm id="I_indexterm1_d1e772" significance="normal"><primary>Gradle</primary><secondary>Jenkins support for</secondary></indexterm>Gradle.</para>
      </listitem>
      <listitem>
        <para><emphasis>Plugin <indexterm id="I_indexterm1_d1e782" significance="normal"><primary>plugins</primary><secondary>architecture of, Jenkins compared to Hudson</secondary></indexterm>architecture.</emphasis> If you intend to write your own
        Jenkins/Hudson plugins, you should be aware that Sonatype is working
        on providing JSR-330 dependency injection for Hudson plugins. New
        developers may find this approach easier to use, though it does raise
        issues about future plugin compatibility between Jenkins and
        Hudson.</para>
      </listitem>
    </itemizedlist>
    <para>The good news is, no matter whether you're using Jenkins or Hudson,
    the products remain very similar, and the vast majority of techniques and
    tips discussed in this book apply equally well to both. Indeed, to
    illustrate this point, many screenshots in this book refer to Hudson
    rather than Jenkins.</para>
  </sect1>
  <sect1 id="intro-sect-your-organization">
    <title>Introducing Continuous Integration into Your Organization</title>
    <para>CI<indexterm class="startofrange" id="ch01-phases" significance="normal"><primary>CI (Continuous Integration)</primary></indexterm> isn't an all-or-nothing affair. In fact, introducing CI
    into an organization takes you on a path that progresses through several
    distinct phases. Each of these phases involves incremental improvements to
    the technical infrastructure as well as, perhaps more importantly,
    improvements in the practices and culture of the development team itself.
    In the following paragraphs, I've tried to paint an approximate picture
    of each phase.</para>
    <sect2>
      <title>Phase 1—No Build Server</title>
      <para>Initially, the team has no central <indexterm id="I_indexterm1_d1e805" significance="normal"><primary>build server</primary></indexterm>build server of any kind. Software is built manually on a
      developers’ machines, though they may use an Ant script or similar to do
      so. Source code may be stored in a central source code repository, but
      developers don't necessarily commit their changes on a regular basis.
      Some time before a release is scheduled, a developer manually integrates
      the changes, a process which is generally associated with pain and
      suffering.</para>
    </sect2>
    <sect2>
      <title>Phase 2—Nightly Builds</title>
      <para>In this phase, the team has a build server, and <indexterm id="I_indexterm1_d1e814" significance="normal"><primary>automated nightly builds</primary></indexterm><indexterm id="I_indexterm1_d1e817" significance="normal"><primary>nightly builds</primary><see>automated nightly builds</see></indexterm>automated builds are scheduled on a regular (typically
      nightly) basis. This build simply compiles the code, as there are no
      reliable or repeatable unit tests. Indeed, automated tests, if they're
      written, aren't a mandatory part of the build process, and may well not
      run correctly at all. However, developers now commit their changes
      regularly, at least at the end of every day. If a developer commits code
      changes that conflict with another developer’s work, the build server
      alerts the team via email the following morning. Nevertheless, the team
      still tends to use the build server for information purposes only—they
      feel little obligation to fix a broken build immediately, and builds may
      stay broken on the build server for some time.</para>
    </sect2>
    <sect2>
      <title>Phase 3—Nightly Builds and Basic Automated Tests</title>
      <para>The team<indexterm id="I_indexterm1_d1e828" significance="normal"><primary>tests</primary><secondary>automating</secondary></indexterm> is now starting to take CI and
      automated testing more seriously. The build server is configured to kick
      off a build whenever new code is committed to the version control
      system, and team members are able to easily see what changes in the
      source code triggered a particular build, and what issues these changes
      address. In addition, the build script compiles the application and runs
      a set of automated unit and/or integration tests. In addition to email,
      the build server also alerts team members about integration issues using
      more proactive channels such as Instant Messaging. Broken builds are now
      generally fixed quickly.</para>
    </sect2>
    <sect2>
      <title>Phase 4—Enter the Metrics</title>
      <para>Automated <indexterm id="I_indexterm1_d1e839" significance="normal"><primary>code quality metrics</primary></indexterm><indexterm id="I_indexterm1_d1e842" significance="normal"><primary>code coverage metrics</primary></indexterm><indexterm id="I_indexterm1_d1e845" significance="normal"><primary>metrics</primary><see>reporting</see></indexterm><indexterm id="I_indexterm1_d1e850" significance="normal"><primary>reporting</primary><secondary>code coverage metrics</secondary></indexterm><indexterm id="I_indexterm1_d1e855" significance="normal"><primary>reporting</primary><secondary>code quality metrics</secondary></indexterm>code quality and code coverage metrics are now run to help
      evaluate the quality of the code base and (to some extent, at least) the
      relevance and effectiveness of the tests. The code quality build also
      automatically generates API documentation for the application. All this
      helps teams keep the quality of the code base high, alerting team
      members if good testing practices are slipping. The team has also set up
      a “build radiator,” a dashboard view of the project status that's
      displayed on a prominent screen visible to all team members.</para>
    </sect2>
    <sect2>
      <title>Phase 5—Getting More Serious About Testing</title>
      <para>The <indexterm id="I_indexterm1_d1e866" significance="normal"><primary>Test-Driven development</primary></indexterm><indexterm id="I_indexterm1_d1e869" significance="normal"><primary>tests</primary><secondary>Test-Driven development</secondary></indexterm>benefits of CI are closely related to
      solid testing practices. Now, practices like Test-Driven Development are
      more widely practiced, resulting in a growing confidence in the results
      of the automated builds. The application is no longer simply compiled
      and tested, but if the tests pass, it's automatically deployed to an
      non-production application server for more comprehensive end-to-end tests and
      performance tests.</para>
    </sect2>
    <sect2>
      <title>Phase 6—Automated Acceptance Tests and More Automated <phrase role="keep-together">Deployment</phrase></title>
      <para>Acceptance-Test Driven Development<indexterm id="I_indexterm1_d1e882" significance="normal"><primary>acceptance tests, automated</primary></indexterm><indexterm id="I_indexterm1_d1e885" significance="normal"><primary>Acceptance-Test Driven Development</primary></indexterm><indexterm id="I_indexterm1_d1e888" significance="normal"><primary>tests</primary><secondary>acceptance tests</secondary></indexterm><indexterm id="I_indexterm1_d1e893" significance="normal"><primary>tests</primary><secondary>automating</secondary></indexterm><indexterm id="I_indexterm1_d1e898" significance="normal"><primary>automated tests</primary><see>tests</see></indexterm> is practiced, guiding development efforts and providing
      high-level reporting on the state of the project. These automated tests
      use Behavior-Driven Development and Acceptance-Test Driven Development
      tools to act as communication and documentation tools
      as much as testing tools, publishing reports on test results in business
      terms that non-developers can understand. Since these high-level tests
      are automated at an early stage in the development process, they also
      provide a clear idea of what features have been implemented, and which
      remain to be done. The application is automatically deployed into test
      environments for testing by the QA team either when changes are committed
      or on a nightly basis; a version can be deployed (or “promoted”) to UAT
      and possibly production environments using a manually-triggered build
      when testers consider it ready. The team is also capable of using the
      build server to back out a release, rolling back to a previous version,
      if something goes horribly wrong.</para>
    </sect2>
    <sect2>
      <title>Phase 7—Continuous Deployment</title>
      <para>Confidence<indexterm id="I_indexterm1_d1e909" significance="normal"><primary>continuous deployment</primary></indexterm> in the automated unit, integration, and acceptance tests
      is now such that teams can apply the automated deployment techniques
      developed in the previous phase to push out new changes directly into
      production.</para>
      <?dbfo-need height=”1in”?>
      <para>The progression between levels here is of course somewhat
      approximate, and may not always match real-world situations. For
      example, you may well introduce automated web tests before integrating
      code quality and code coverage reporting. However, this section should give a
      general idea of how implementing a CI strategy in a
      real world organization generally<indexterm id="I_indexterm1_d1e916" class="endofrange" startref="ch01-phases" significance="normal"><primary/></indexterm> works.</para>
    </sect2>
  </sect1>
  <sect1 id="I_sect11_d1e919">
    <title>Where to Now?</title>
    <para>Throughout the remainder of this book, as you study the various
    features Jenkins has to offer, as well as the practices required to make
    the most of these features, you'll see how you can progress through each
    of these levels with Jenkins. Remember, most of the examples used in
    the book are available online (see <ulink url="http://www.wakaleo.com/books/jenkins-the-definitive-guide"/>
    for more details), so you can get your hands dirty too!</para>
  </sect1>
</chapter>

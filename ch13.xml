<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="chapter-maintaining-jenkins">
  <title>Maintaining Jenkins</title>
  <sect1 id="sect-maint-introduction">
    <title>Introduction</title>
    <para><indexterm class="startofrange" id="ch13-maint" significance="normal"><primary>maintenance</primary></indexterm><indexterm class="startofrange" id="ch13-maint2" significance="normal"><primary>Jenkins</primary><secondary>maintenance of</secondary></indexterm>In this chapter, we'll be discussing a few tips and tricks
    that you might find useful when maintaining a large Jenkins instance. We'll
    look at things like how to limit, and keep tabs on, disk usage, how
    to give Jenkins enough memory, and how to archive build jobs or migrate
    them from one server to another. Some of these topics are discussed
    elsewhere in the book, but here we'll be looking at things from the
    point of view of the system administrator.</para>
  </sect1>
  <sect1 id="sect-maint-disk-space">
    <title>Monitoring Disk Space</title>
    <para>Build History<indexterm class="startofrange" id="ch13-monitor1" significance="normal"><primary>Jenkins</primary><secondary>maintenance of</secondary><tertiary>monitoring disk space</tertiary></indexterm><indexterm class="startofrange" id="ch13-monitor2" significance="normal"><primary>maintenance</primary><secondary>monitoring disk space</secondary></indexterm><indexterm class="startofrange" id="ch13-monitor3" significance="normal"><primary>disk space</primary><secondary>monitoring</secondary></indexterm><indexterm class="startofrange" id="ch13-monitor4" significance="normal"><primary>build history</primary><secondary>disk usage of</secondary></indexterm> takes disk space. In addition, Jenkins analyzes the build
    records when it loads a project configuration, so a build job with a
    thousand archived builds is going to take a lot longer to load than one
    with only fifty. If you have a large Jenkins server with tens or hundreds
    of build jobs, adjust your expectations accordingly.</para>
    <para>Probably the simplest way to keep a cap on disk usage is to limit
    the number of builds a project maintains in its history. You can configure
    this by ticking the Discard Old Builds checkbox at the top of the project
    configuration page (see <xref linkend="fig-maintenance-discard-old-builds"/>). If you tell Jenkins to
    only keep the last 20 builds, it will start discarding (and deleting)
    older build jobs once it reaches this number. You can limit them by number
    (i.e., no more than 20 builds) or by date (i.e., builds no older than 30
    days). It does this intelligently, though: if there has ever been a
    successful build, Jenkins will always keep at least the latest successful
    build as part of its build history, so you'll never loose your last
    successful build.</para>
    <figure float="0" id="fig-maintenance-discard-old-builds">
      <title>Discarding old builds</title>
      <mediaobject id="I_mediaobject13_d1e17727">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_1301.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_1301.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>The problem with discarding old builds is that you loose the build
    history at the same time. Jenkins uses the build records to produce graphs
    of test results and build metrics. If you limit the number of builds to be
    kept to twenty, for example, Jenkins will only display graphs containing
    the last twenty data points, which can be a bit limited. This sort of
    information can be very useful to the developers, but it's often good to
    be able to see how the project metrics are doing throughout the whole life
    of the project, not just over the last week or two.</para>
    <para>Fortunately, Jenkins has a work-around that can keep both developers
    and system administrators happy. In general, the items that take up the
    most disk space are the build artifacts: JAR files, WAR files, and so on.
    The build history itself is mostly XML log files, which don’t take up too
    much space. If you click on the “Advanced...” button, Jenkins will let you
    discard the artifacts, but not the build data. In <xref linkend="fig-maintenance-discard-old-builds-advanced"/>, for example, you're
    configured Jenkins to keep artifacts for a maximum of 7 days. This is
    a great option if you need to put a cap on disk usage, but still want to
    provide a full scope of build metrics for the development teams.</para>
    <figure float="none" id="fig-maintenance-discard-old-builds-advanced">
      <title>Discarding old builds—advanced options</title>
      <mediaobject id="I_mediaobject13_d1e17741">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_1302.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_1302.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Don’t hesitate to be ruthless, keeping the maximum number of builds
    with artifacts quite low. Remember, Jenkins will always keep the last
    stable and the last successful builds, no matter what you tell it, so you'll
    always have at least one working artifact (unless of course the
    project has yet to successfully build). Jenkins also lets you mark an
    individual build as “Keep this log forever”, to exclude certain important
    builds from being discarded automatically.</para>
    <sect2>
      <title>Using the Disk Usage Plugin</title>
      <para>One<indexterm class="startofrange" id="ch13-usage1" significance="normal"><primary>plugins</primary><secondary>Disk Usage</secondary></indexterm><indexterm class="startofrange" id="ch13-usage2" significance="normal"><primary>Disk Usage plugin</primary></indexterm> of the most useful tools in the Jenkins administrator’s
      tool box is the Disk Usage plugin. This plugin records and reports on
      the amount of disk space used by your projects. It lets you isolate and
      fix projects that are using too much disk space.</para>
      <para>You install the Disk Usage plugin in the usual way, from the
      Plugin Manager screen. Once you've installed the plugin and restarted
      Jenkins, the Disk Usage plugin will record the amount of disk space used
      by each project. It will also add a Disk Usage link on the Manage
      Jenkins screen, which you can use to display the overall disk usage for
      your projects (see <xref linkend="fig-maintenance-disk-usage"/>).</para>
      <figure float="none" id="fig-maintenance-disk-usage">
        <title>Viewing disk usage</title>
        <mediaobject id="I_mediaobject13_d1e17769">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_1303.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_1303.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>This list is sorted by overall disk usage, so the projects using
      the most disk space are at the top. The list provides two values for
      each project—the Builds column indicates the total amount of space used
      by all of the project’s build history, whereas the Workspace column is
      the amount of space used to build the project. For ongoing projects, the
      Workspace value tends to be relatively stable (a project needs what it
      needs to build correctly), whereas the Builds column will increase over
      time, sometimes at a dramatic rate, unless you do something about it.
      You can keep the space needed by a project’s history under control by
      limiting the number of builds being kept for a project, and by being
      careful about what artifacts are being stored.</para>
      <para>To get an idea of how fast the disk space is being used up, you
      can also display the amount of disk space used in each project over
      time. To do this, you need to activate the plugin in the System
      Configuration screen (see <xref linkend="fig-maintenance-disk-usage-project"/>).</para>
      <figure float="0" id="fig-maintenance-disk-usage-project">
        <title>Displaying disk usage for a project</title>
        <mediaobject id="I_mediaobject13_d1e17783">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_1304.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_1304.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>This will record and display how much space your projects are
      using over time. The Disk Usage plugin displays a graph of disk usage
      over time (see <xref linkend="fig-maintenance-project-disk-usage"/>),
      which can give you a great view of how fast your project is filling up
      the disk, or, on the contrary, if the disk usage is stable
      over<indexterm id="I_indexterm13_d1e17792" class="endofrange" startref="ch13-usage1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm13_d1e17794" class="endofrange" startref="ch13-usage2" significance="normal"><primary/></indexterm> time.</para>
      <figure float="none" id="fig-maintenance-project-disk-usage">
        <title>Displaying project disk usage over time</title>
        <mediaobject id="I_mediaobject13_d1e17800">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_1305.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_1305.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
    <sect2>
      <title>Disk Usage and the Jenkins Maven Project Type</title>
      <para>If you're<indexterm class="startofrange" id="ch13-musage" significance="normal"><primary>Maven build jobs</primary><secondary>disk usage of</secondary></indexterm> using the Jenkins Maven build jobs, there are some
      additional details you should know about. In Jenkins, Maven build jobs
      will automatically archive your build artifacts by default. This may not
      be what you intend.</para>
      <para>The problem is that these SNAPSHOT artifacts take up space—a lot
      of it. In an active project, Jenkins might be running several builds per
      hour, so permanently storing the generated JAR files for each build can
      be very costly. The problem is accentuated if you have multimodule
      projects, as Jenkins will archive the artifacts generated for each
      module.</para>
      <para>In fact, if you need to archive your Maven SNAPSHOT artifacts, it's
      probably a better idea to deploy them directly to your local Maven
      repository manager. Nexus Pro, for example, can be configured to do this
      and Artifactory can be configured to delete old snapshot
      artifacts.</para>
      <para>Fortunately, you can configure Jenkins to this, go to the “Build”
      section of your build job configuration screen and click on the Advanced
      button. This will display some extra fields, as shown in <xref linkend="fig-jenkins-maven-no-archives"/>.</para>
      <figure float="none" id="fig-jenkins-maven-no-archives">
        <title>Maven build jobs—advanced options</title>
        <mediaobject id="I_mediaobject13_d1e17827">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_1306.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_1306.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>If you tick the “Disable automatic artifact archiving” checkbox
      here, Jenkins will refrain from storing the JAR files your project build
      generates. This is a good way of making your friendly system
      administrator happy.</para>
      <para>Note that sometimes you <emphasis>do</emphasis> need to store the
      Maven artifacts. For example, they often come in handy when implementing
      a build pipeline (see <xref linkend="sect-build-pipelines"/>). In this
      case, you can always choose to archive the artifacts you need manually,
      and then use the “Discard old builds” option to refine how long you
      keep<indexterm id="I_indexterm13_d1e17841" class="endofrange" startref="ch13-musage" significance="normal"><primary/></indexterm><indexterm id="I_indexterm13_d1e17843" class="endofrange" startref="ch13-monitor1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm13_d1e17845" class="endofrange" startref="ch13-monitor2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm13_d1e17847" class="endofrange" startref="ch13-monitor3" significance="normal"><primary/></indexterm><indexterm id="I_indexterm13_d1e17849" class="endofrange" startref="ch13-monitor4" significance="normal"><primary/></indexterm> them for.</para>
    </sect2>
  </sect1>
  <sect1 id="sect-maint-server-load">
    <title>Monitoring the Server Load</title>
    <para>Jenkins<indexterm class="startofrange" id="ch13-server1" significance="normal"><primary>Jenkins</primary><secondary>maintenance of</secondary><tertiary>monitoring server load</tertiary></indexterm><indexterm class="startofrange" id="ch13-server2" significance="normal"><primary>maintenance</primary><secondary>monitoring server load</secondary></indexterm><indexterm class="startofrange" id="ch13-server3" significance="normal"><primary>build server</primary><secondary>monitoring load of</secondary></indexterm> provides build-in monitoring of server activity. On the
    Manage Jenkins screen, click on the Load Statistics icon. This will
    display a graph of the server load over time for the master node (see
    <xref linkend="fig-jenkins-load-statistics"/>). This graph keeps track of
    three metrics: the total number of executors, the number of busy
    executors, and queue length.</para>
    <para>The <command moreinfo="none">total number of executors</command>
    (the blue line) includes the executors on the master and on the slave
    nodes. This can vary when slaves are brought on and offline, and can be a
    useful indicator of how well dynamic provisioning of slave nodes is
    working.</para>
    <para>The <command moreinfo="none">number of busy executors</command> (the
    red line) indicates how many executors are executing
    builds. You should make sure you have enough spare capacity here to absorb
    spikes in build jobs. If all of executors are permanently occupied
    running build jobs, you should add more executors and/or slave
    nodes.</para>
    <para>The <command moreinfo="none">queue length</command> (the gray line)
    is the number of build jobs awaiting executing. Build jobs are queued when
    all executors are occupied. This metric doesn't include jobs that
    are waiting for an upstream build job to finish, so it gives a reasonable
    idea of when your server could benefit from extra capacity.</para>
    <figure float="0" id="fig-jenkins-load-statistics">
      <title>Jenkins Load Statistics</title>
      <mediaobject id="I_mediaobject13_d1e17895">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_1307.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_1307.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>You can get a similar graph for slave nodes, using the Load
    Statistics icon in the slave node details page.</para>
    <para>Another option is to install the Monitoring plugin. This plugin uses
    JavaMelody to produce comprehensive HTML reports about the state of your
    build server, including CPU and system load, average response time, and
    memory usage (see <xref linkend="fig-jenkins-monitoring-pluging"/>). Once
    you've installed this plugin, you can access the JavaMelody graphs from
    the Manage Jenkins screen, using the “Monitoring of Jenkins/Jenkins
    master” or “Jenkins/Jenkins nodes” <indexterm id="I_indexterm13_d1e17906" class="endofrange" startref="ch13-server1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm13_d1e17908" class="endofrange" startref="ch13-server2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm13_d1e17910" class="endofrange" startref="ch13-server3" significance="normal"><primary/></indexterm>menu entries.</para>
    <figure float="0" id="fig-jenkins-monitoring-pluging">
      <title>The Jenkins Monitoring plugin</title>
      <mediaobject id="I_mediaobject13_d1e17916">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_1308.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_1308.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
  </sect1>
  <sect1 id="sect-maint-backups">
    <title>Backing Up Your Configuration</title>
    <para>Backing<indexterm class="startofrange" id="ch13-backups" significance="normal"><primary>backups</primary></indexterm><indexterm class="startofrange" id="ch13-backups2" significance="normal"><primary>maintenance</primary><secondary>backups</secondary></indexterm><indexterm class="startofrange" id="ch13-backups3" significance="normal"><primary>Jenkins</primary><secondary>maintenance of</secondary><tertiary>backups</tertiary></indexterm> up your data is a universally recommended practice, and
    your Jenkins server should be no exception. Fortunately, backing up
    Jenkins is relatively easy. In this section, you'll learn a few ways to
    do this.</para>
    <sect2>
      <title>Fundamentals of Jenkins Backups</title>
      <para>In the simplest of configurations, all you need to do is to
      periodically back up your <filename moreinfo="none">JENKINS_HOME</filename> directory.
      This contains all of your build job configurations, your slave node
      configurations, and your build history. This will work fine while
      Jenkins is running—there's no need to shut down your server while doing
      your backup.</para>
      <para>The downside of this approach is that the
      <filename moreinfo="none">JENKINS_HOME</filename> directory can contain a very large
      amount of data (see <xref linkend="sec-hudson-home-directory-contents"/>). If this becomes an
      issue, you can save a little by not backing up the following
      directories, which contain data that can be easily recreated on-the-fly
      by Jenkins:</para>
      <variablelist>
        <varlistentry>
          <term>
            <filename moreinfo="none">$JENKINS_HOME/war</filename>
          </term>
          <listitem>
            <para>The exploded WAR file</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <filename moreinfo="none">$JENKINS_HOME/cache</filename>
          </term>
          <listitem>
            <para>Downloaded tools</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <filename moreinfo="none">$JENKINS_HOME/tools</filename>
          </term>
          <listitem>
            <para>Extracted tools</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>You can also be selective about what you back up in your build
      job data. The <filename moreinfo="none">$JENKINS_HOME/jobs</filename>
      directory contains job configuration, build history, and archived files
      for each of your build jobs. The structure of a build job directory is
      illustrated in <xref linkend="fig-jenkins-build-directory"/>.</para>
      <figure float="none" id="fig-jenkins-build-directory">
        <title>The builds directory</title>
        <mediaobject id="I_mediaobject13_d1e17989">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_1309.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_1309.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>To understand how to optimize your Jenkins backups, you need to
      understand how the build job directories are organized. Within the
      <emphasis>jobs</emphasis> directory there's a subdirectory for each
      build job. This subdirectory contains two subdirectories of its own:
      <filename moreinfo="none">builds</filename> and <filename moreinfo="none">workspace</filename>. There's no need to backup the
      <filename moreinfo="none">workspace</filename> directory, as it will
      simply be restored with a clean checkout if Jenkins finds it
      missing.</para>
      <para>The <filename moreinfo="none">builds</filename> directory, on the
      other hand, needs more attention. This directory contains the history of
      your build results and previously-generated artifacts, with a
      time-stamped directory for each previous build. If you're not
      interested in restoring build history or past artifacts, you don’t need
      to store this directory. If you are, read on! In each of these
      directories, you'll find the build history (stored in the form of XML
      files such as JUnit test results) and archived artifacts. Jenkins uses
      the XML and text files to produce the graphs it displays on the build
      job dashboard, so if these are important to you, you should store these
      files. The <filename moreinfo="none">archive</filename> directory
      contains binary files that were generated and stored by previous builds.
      These binaries may or may not be important to you, but they can take up
      a lot of space, so if you exclude them from your backups, you may be
      able to save a considerable amount of space.</para>
      <para>Just as it's wise to make frequent backups, it's also wise to
      test your backup procedure. With Jenkins, this is easy to do. Jenkins
      home directories are totally portable, so all you need to do to test
      your backup is to extract your backup into a temporary directory and run
      an instance of Jenkins against it. For example, imagine we've
      extracted our backup into a temporary directory called <filename moreinfo="none">/tmp/jenkins-backup</filename>. To test this backup,
      first set the <filename moreinfo="none">JENKINS_HOME</filename> directory to this
      temporary directory:</para>
      <programlisting id="I_programlisting13_d1e18024" format="linespecific">$ <userinput moreinfo="none">export JENKINS_HOME=/tmp/jenkins-backup</userinput></programlisting>
      <para>Then, simply start Jenkins on a different port and see if it
      works:</para>
      <programlisting id="I_programlisting13_d1e18031" format="linespecific">$ <userinput moreinfo="none">java -jar jenkins.war --httpPort=8888</userinput></programlisting>
      <para>You can now view Jenkins running on this port and make sure that
      your backup worked correctly.</para>
    </sect2>
    <sect2>
      <title>Using the Backup Plugin</title>
      <para>The <indexterm id="I_indexterm13_d1e18042" significance="normal"><primary>Backup plugin</primary></indexterm><indexterm id="I_indexterm13_d1e18045" significance="normal"><primary>plugins</primary><secondary>Backup</secondary></indexterm>approach described in the previous section is simple
      enough to integrate into your normal backup procedures, but you may
      prefer something more Jenkins-specific. The Backup plugin (see <xref linkend="fig-jenkins-backup-manager"/>) provides a simple user
      interface that you can use to back up and restore your Jenkins
      configurations and data.</para>
      <figure float="none" id="fig-jenkins-backup-manager">
        <title>The Jenkins Backup Manager Plugin</title>
        <mediaobject id="I_mediaobject13_d1e18056">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_1310.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_1310.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>This plugin lets you configure and run backups of both your build
      job configurations and your build history. The Setup screen gives you a
      large degree of control over exactly what you want backed up (see <xref linkend="fig-jenkins-backup-config"/>). You can opt to only back up the
      XML configuration files, or back up both the configuration files and the
      build history. You can also choose to backup (or not to backup) the
      automatically-generated Maven artifacts (in many build processes, these
      will be available on your local enterprise repository manager). You can
      also back up the job workspaces (typically unnecessary, as we discussed
      above) and any generated fingerprints.</para>
      <figure float="none" id="fig-jenkins-backup-config">
        <title>Configuring the Jenkins Backup Manager</title>
        <mediaobject id="I_mediaobject13_d1e18068">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_1311.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_1311.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>You can trigger a backup manually from the Backup Manager screen
      (which you can access from the Manage Jenkins screen). The backup takes
      some time, and will shut down Jenkins during the process (unless you
      deactivate this option in the backup <phrase role="keep-together">configuration</phrase>).</para>
      <para>At the time of writing, there's no way to schedule this operation
      from within Jenkins, but you can start the backup operation externally
      by invoking the corresponding URL (e.g., <ulink url="http://localhost:8080/backup/backup"/> if your Jenkins
      instance is running locally on port 8080). In a Unix environment, for
      example, this would typically be scheduled as a cron job using a tool
      like <literal moreinfo="none">wget</literal> or <literal moreinfo="none">curl</literal> to start the
      backup.</para>
    </sect2>
    <sect2>
      <title>More Lightweight Automated Backups</title>
      <para>If all<indexterm id="I_indexterm13_d1e18093" significance="normal"><primary>Thin Backup plugin</primary></indexterm><indexterm id="I_indexterm13_d1e18096" significance="normal"><primary>plugins</primary><secondary>Thin Backup</secondary></indexterm><indexterm id="I_indexterm13_d1e18101" significance="normal"><primary>lightweight backups</primary></indexterm> you want to back up is your build job configuration, the
      Backup Manager plugin might be considered overkill. Another option is to
      use the Thin Backup plugin, which lets you schedule full and incremental
      backups of your configuration files. Because they don’t save your build
      history or artifacts, these backups are very fast, and there's no need
      to shut down the server to do them.</para>
      <para>Like the Backup plugin, this plugin adds an icon to the Jenkins
      System Configuration page. From here, you can configure and schedule
      your configuration backups, force an immediate backup, or restore your
      configuration files to a previous state. Configuration is
      straightforward (see <xref linkend="fig-lightweight-backup-config"/>),
      and simply involves scheduling full and incremental backups using a cron
      job syntax, and providing a directory in which to store the
      backups.</para>
      <figure float="none" id="fig-lightweight-backup-config">
        <title>Configuring the Thin Backup plugin</title>
        <mediaobject id="I_mediaobject13_d1e18112">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_1312.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_1312.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>To restore a previous configuration, just go to the Restore page
      and choose the date of the configuration you wish to reinstate (see
      <xref linkend="fig-restore-light-plugin"/>). Once the configuration has
      been restored to the previous state, you need to reload the Jenkins
      configuration from disk <indexterm id="I_indexterm13_d1e18121" class="endofrange" startref="ch13-backups" significance="normal"><primary/></indexterm><indexterm id="I_indexterm13_d1e18123" class="endofrange" startref="ch13-backups2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm13_d1e18125" class="endofrange" startref="ch13-backups3" significance="normal"><primary/></indexterm>or restart Jenkins.</para>
      <figure float="none" id="fig-restore-light-plugin">
        <title>Restoring a previous configuration</title>
        <mediaobject id="I_mediaobject13_d1e18131">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_1313.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_1313.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
  </sect1>
  <sect1 id="sect-maint-archiving-jobs">
    <title>Archiving Build Jobs</title>
    <para>Another <indexterm class="startofrange" id="ch13-arc1" significance="normal"><primary>maintenance</primary><secondary>archiving build jobs</secondary></indexterm><indexterm class="startofrange" id="ch13-arc2" significance="normal"><primary>Jenkins</primary><secondary>maintenance of</secondary><tertiary>archiving build jobs</tertiary></indexterm><indexterm class="startofrange" id="ch13-arc3" significance="normal"><primary>archiving build jobs</primary></indexterm><indexterm class="startofrange" id="ch13-arc4" significance="normal"><primary>build jobs</primary><secondary>archiving</secondary></indexterm>way to address disk space issues is to delete or archive
    projects that are no longer active. Archiving a project allows you to
    easily restore it later if you need to consult the project data or
    artifacts. Archiving a project is simple: just move the build project
    directory out of the job directory. Of course, typically, you would
    compress it into a ZIP file or a tarball first.</para>
    <para>In the following example, you want to archive the
    <emphasis>tweeter-default</emphasis> project. So, first you go to the
    Jenkins <filename moreinfo="none">jobs</filename> directory and create a
    tarball (compressed archive) of the <filename moreinfo="none">tweeter-default</filename> build job directory:</para>
    <screen format="linespecific">$ <userinput moreinfo="none">cd $JENKINS_HOME/jobs</userinput>
$ <userinput moreinfo="none">ls</userinput>
gameoflife-default      tweeter-default
$ <userinput moreinfo="none">tar czf tweeter-default.tgz tweeter-default</userinput>
$ <userinput moreinfo="none">ls</userinput>
gameoflife-default      tweeter-default         tweeter-default.tgz</screen>
    <para>As long as the project you want to archive isn't running, you can
    now safely delete the project directory and move the archive into
    storage:</para>
    <screen format="linespecific">$ <userinput moreinfo="none">rm -Rf tweeter-default</userinput>
$ <userinput moreinfo="none">mv tweeter-default.tgz /data/archives/jenkins</userinput></screen>
    <para>Once you've done this, you can simply reload the configuration
    from the disk in the Manage Jenkins screen (see <xref linkend="fig-maintenance-reload-configuration"/>). The archived project
    will promptly disappear from your dashboard.</para>
    <figure float="none" id="fig-maintenance-reload-configuration">
      <title>Reloading the configuration from disk</title>
      <mediaobject id="I_mediaobject13_d1e18203">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_1314.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_1314.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>On a Windows machine, you can do exactly the same thing by creating
    a ZIP file of the project<indexterm id="I_indexterm13_d1e18210" class="endofrange" startref="ch13-arc1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm13_d1e18212" class="endofrange" startref="ch13-arc2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm13_d1e18214" class="endofrange" startref="ch13-arc3" significance="normal"><primary/></indexterm><indexterm id="I_indexterm13_d1e18216" class="endofrange" startref="ch13-arc4" significance="normal"><primary/></indexterm> directory.</para>
  </sect1>
  <sect1 id="sect-maint-migrating-jobs">
    <title>Migrating Build Jobs</title>
    <para>There <indexterm class="startofrange" id="ch13-migrate1" significance="normal"><primary>Jenkins</primary><secondary>maintenance of</secondary><tertiary>migrating build jobs</tertiary></indexterm><indexterm class="startofrange" id="ch13-migrate2" significance="normal"><primary>maintenance</primary><secondary>migrating build jobs</secondary></indexterm><indexterm class="startofrange" id="ch13-migrate3" significance="normal"><primary>migrating build jobs</primary></indexterm><indexterm class="startofrange" id="ch13-migrate4" significance="normal"><primary>build jobs</primary><secondary>migrating</secondary></indexterm>are times when you need to move or copy Jenkins build jobs
    from one Jenkins instance to another, without copying the entire Jenkins
    configuration. For example, you might be migrating your build jobs to a
    Jenkins instance on a brand new box, with system configuration details
    that vary from the original machine. Or, you might be restoring an old
    build job that you've archived.</para>
    <para>As you've seen, Jenkins stores all of the data it needs for a
    project in a subdirectory of the <filename moreinfo="none">jobs</filename>
    directory in your Jenkins home directory. This subdirectory is easy to
    <phrase role="keep-together">identify—</phrase>it has the same name as
    your project. Incidentally, this is one reason why your project names
    really shouldn’t contain spaces, particularly if Jenkins is running under
    Unix or Linux—it makes maintenance and admin tasks a lot easier if the
    project names are also well-behaved Unix filenames.</para>
    <para>You can copy or move build jobs between instances of projects simply
    enough by copying or moving the build job directories to the new Jenkins
    instance. The project job directory is self-contained—it contains both the
    full project configuration and all the build history. It's even safe
    enough to copy build job directories to a running Jenkins instance, though
    if you're also deleting them from the original server, you should shut
    this one down first. You don’t even need to restart the new Jenkins
    instance to see the results of your import—just go to the Manage Jenkins
    screen and click on Reload Configuration From Disk. This will load the new
    jobs and make them immediately visible on the Jenkins dashboard.</para>
    <para>There are a few gotchas, however. If you're migrating your jobs to
    a brand new Jenkins configuration, remember to install, or migrate, the
    plugins from your original server. The plugins can be found in the
    <filename moreinfo="none">plugins</filename> directory, so you can simply
    copy everything from this directory to the corresponding directory in your
    new instance.</para>
    <para>Of course, you might be migrating the build jobs to a new instance
    precisely <emphasis>because</emphasis> the plugin configuration on the
    original box is a mess. Some Jenkins plugins can be a bit buggy sometimes,
    and you may want to move to a clean installation with a well-known,
    well-defined set of vetted plugins. In this case, you may need to rework
    some of your project configurations once they've been imported.</para>
    <para>The reason for this is straightforward. When you use a plugin in a
    project, the project’s <filename moreinfo="none">config.xml</filename>
    file will be updated with plugin-specific configuration fields. If, for some
    reason, you need to migrate projects selectively to a Jenkins installation
    <emphasis>without</emphasis> these plugins installed, Jenkins will no
    longer understand these parts of the project configuration. The same thing
    can also happen if the plugin versions are very different on the
    machines, and the data format used by the plugin has changed.</para>
    <para>If you're migrating jobs to a Jenkins instance with a different
    configuration, it also pays to keep an eye on the system logs. Invalid
    plugin configurations will usually let you know through warnings or
    exceptions. While not always fatal, these error messages often mean that
    the plugin won't work as expected, or at all.</para>
    <para>Jenkins provides some useful features to help you migrate your
    project configurations. If Jenkins finds data that it thinks is out of
    date or invalid, it will tell you so. On the Manage Jenkins screen, you'll
    get a message like the one in <xref linkend="fig-jenkins-new-version"/>.</para>
    <figure float="0" id="fig-jenkins-new-version">
      <title>Jenkins will inform you if your data isn't compatible with the
      current version</title>
      <mediaobject id="I_mediaobject13_d1e18282">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_1315.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_1315.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>From here, you can choose to either leave the configuration as it is
    (just in case you roll back to a previous version of your Jenkins
    instance, for example), or let Jenkins discard the fields it can't read.
    If you choose this option, Jenkins will bring up a screen containing more
    details about the error, and can even help tidy up your project
    configuration files if you wish (see <xref linkend="fig-jenkins-manage-old-data"/>).</para>
    <figure float="0" id="fig-jenkins-manage-old-data">
      <title>Managing out-of-date build jobs data</title>
      <mediaobject id="I_mediaobject13_d1e18295">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_1316.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_1316.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>This screen gives you more details about the project containing the
    dodgy data, as well as the exact error message. This gives you several
    options. If you're sure that you no longer need the plugin that
    originally created the data, you can safely remove the redundant fields by
    clicking on the Discard Unreadable Data button. Alternatively, you may
    decide that the fields belong to a useful plugin that hasn’t yet been
    installed on the new Jenkins instance. In this case, install the plugin
    and all should be well. Finally, you can always choose to leave the
    redundant data and live with the error message, at least until you're
    sure that you won’t need to migrate the job back to the old server some
    day.</para>
    <para>However, Jenkins doesn’t always detect all of the errors or
    inconsistencies—it still pays to keep one eye on the system logs when you
    migrate your build jobs. For example, the following is a real example from
    a Jenkins log file showing what can happen during the migration
    process:</para>
    <screen format="linespecific">Mar 16, 2010 2:05:06 PM hudson.util.CopyOnWriteList$ConverterImpl unmarshal
WARNING: Failed to resolve class
com.thoughtworks.xstream.mapper.CannotResolveClassException: hudson.plugins.ciga
me.GamePublisher : hudson.plugins.cigame.GamePublisher
        at com.thoughtworks.xstream.mapper.DefaultMapper.realClass(DefaultMapper
.java:68)
        at com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper
.java:38)
        at com.thoughtworks.xstream.mapper.DynamicProxyMapper.realClass(DynamicP
roxyMapper.java:71)
        at com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper
.java:38)</screen>
    <para>The error is essentially telling us that it can’t find a class
    called <literal moreinfo="none">hudson.plugins.cigame.GamePublisher</literal>. In fact,
    the target installation is missing the CI Game plugin. In this case
    (as sometimes happens), no warning messages were appearing on the Manage
    Jenkins page, so Jenkins was unable to correct the configuration files
    itself.</para>
    <para>The simplest solution in this case would be to install the CI Game
    plugin on the target server. But what if you don’t want to install this
    plugin? We could leave the configuration files alone, but this might mask
    more significant errors later on—it would be better to tidy them
    up.</para>
    <para>In that case, you need to inspect and update the project
    configuration files by hand. On this Unix box, I just used
    <literal moreinfo="none">grep</literal> to find all the configuration files containing a
    reference to “cigame”:</para>
    <screen format="linespecific">$ <userinput moreinfo="none">cd $JENKINS_HOME/jobs</userinput>
$ <userinput moreinfo="none">grep cigame */config.xml</userinput>
project-a/config.xml:    &lt;hudson.plugins.cigame.GamePublisher/&gt;
project-b/config.xml:    &lt;hudson.plugins.cigame.GamePublisher/&gt;
project-c/config.xml:    &lt;hudson.plugins.cigame.GamePublisher/&gt;</screen>
    <para>In these <emphasis>config.xml</emphasis> files, I found the
    reference to the CI Game plugin in the <literal moreinfo="none">&lt;publishers&gt;</literal> section (which is where the
    configuration for the reporting plugins generally goes):</para>
    <programlisting id="I_programlisting13_d1e18334" format="linespecific">&lt;maven2-moduleset&gt;
  ...
  &lt;publishers&gt;
    &lt;hudson.plugins.cigame.GamePublisher/&gt;
    &lt;hudson.plugins.claim.ClaimPublisher/&gt;
  &lt;/publishers&gt;
  ...
&lt;/maven2-moduleset&gt;</programlisting>
    <para>To fix the issue, all I have to do is to remove the offending
    line:</para>
    <programlisting id="I_programlisting13_d1e18339" format="linespecific">&lt;maven2-moduleset&gt;
  ...
  &lt;publishers&gt;
    &lt;hudson.plugins.claim.ClaimPublisher/&gt;
  &lt;/publishers&gt;
  
  ...
&lt;/maven2-moduleset&gt;</programlisting>
    <para>The exact location of the plugin configuration data will vary
    depending on the plugin, but in general the <filename moreinfo="none">config.xml</filename> files are quite readable, and
    updating them by hand isn’t too hard.</para>
    <para>So, all in all, migrating build jobs between Jenkins instances isn’t
    all that hard—you just need to know a couple of tricks for the corner
    cases. If you know where to look Jenkins provides some nice tools to
    make<indexterm id="I_indexterm13_d1e18348" class="endofrange" startref="ch13-migrate1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm13_d1e18350" class="endofrange" startref="ch13-migrate2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm13_d1e18352" class="endofrange" startref="ch13-migrate3" significance="normal"><primary/></indexterm><indexterm id="I_indexterm13_d1e18354" class="endofrange" startref="ch13-migrate4" significance="normal"><primary/></indexterm> the process<indexterm id="I_indexterm13_d1e18357" class="endofrange" startref="ch13-maint2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm13_d1e18359" class="endofrange" startref="ch13-maint" significance="normal"><primary/></indexterm> smoother.</para>
  </sect1>
  <sect1 id="sect-maint-conclusion">
    <title>Conclusion</title>
    <para>In this chapter, you looked at a number of considerations that you
    should be aware of if you're responsible for maintaining a Jenkins server,
    including how to monitor disk and server usage, how to back up your build
    jobs and Jenkins configuration files, and also how to migrate build jobs
    and upgrade build data safely.</para>
  </sect1>
</chapter>

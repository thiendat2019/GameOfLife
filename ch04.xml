<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="chapter-configuration">
  <title>Configuring Your Jenkins Server</title>
  <sect1 id="sect-configuration-introduction">
    <title>Introduction</title>
    <para><indexterm class="startofrange" id="ch04-config" significance="normal"><primary>configuration</primary></indexterm><indexterm id="I_indexterm4_d1e4122" significance="normal"><primary>Jenkins</primary><secondary>configuring</secondary><see>configuration</see></indexterm>Before you can start creating your build jobs in Jenkins,
    you need to do a little configuration, to ensure that your Jenkins server
    works smoothly in your particular environment. Jenkins is highly
    configurable, and, although most options are provided with sensible
    default values, 
    it's always a good idea to know exactly
    what your build server is doing.</para>
    <para>Jenkins is globally very easy to configure. The administration
    screens are intuitive, and the contextual online help (the blue question
    mark icons next to each field) is detailed and precise. In this chapter,
    we'll look at how to configure your basic server setup in detail,
    including how to configure Jenkins to use different versions of Java,
    build tools such as Ant and Maven, and SCM tools such as CVS and
    Subversion. We'll look at more advanced server configuration, such as
    using other version control systems or notification tools, further on in
    the book.</para>
  </sect1>
  <sect1 id="sect-configuration-manage-hudson">
    <title>The Configuration Dashboard—The Manage Jenkins Screen</title>
    <para>In <indexterm class="startofrange" id="ch04-manage" significance="normal"><primary>Manage Jenkins screen</primary></indexterm>Jenkins, you manage virtually all features of system
    configuration in the Manage Jenkins screen (see <xref linkend="fig-hudson-manage-hudson"/>). You can also get to this screen
    directly from anywhere in the application by typing “manage” in the
    Jenkins search box. This screen changes depending on what plugins you
    install, so don’t be surprised if you see more than what we show
    here.</para>
    <figure float="0" id="fig-hudson-manage-hudson">
      <title>You configure your Jenkins installation in the Manage Jenkins
      screen</title>
      <mediaobject id="I_mediaobject4_d1e4146">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0401.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0401.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>This screen lets you configure different features of your Jenkins
    server. Each link on this page takes you to a dedicated configuration
    screen, where you can manage different parts of the Jenkins server. Some
    of the more interesting options are discussed here:</para>
    <variablelist>
      <varlistentry>
        <term>Configure System</term>
        <listitem>
          <para><indexterm id="I_indexterm4_d1e4159" significance="normal"><primary>configuration</primary><secondary>Configure System screen</secondary></indexterm><indexterm id="I_indexterm4_d1e4164" significance="normal"><primary>Configure System screen</primary></indexterm>This is where you manage paths to the various tools
          you use in your builds, such as JDKs, versions of Ant and Maven,
          as well as security options, email servers, and other system-wide
          configuration details. Many of the plugins that you install will
          also need to be configured here—Jenkins will add the fields
          dynamically when you install the plugins.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Reload Configuration from Disk</term>
        <listitem>
          <para><indexterm id="I_indexterm4_d1e4173" significance="normal"><primary>configuration</primary><secondary>Reload Configuration from Disk screen</secondary></indexterm><indexterm id="I_indexterm4_d1e4178" significance="normal"><primary>Reload Configuration from Disk screen</primary></indexterm>As we saw in the previous chapter, Jenkins stores all
          its system and build job configuration details as XML files stored
          in the Jenkins home directory (see <xref linkend="sec-hudson-home-directory"/>). It also stores all of the
          build history in the same directory. If you're migrating build jobs
          from one Jenkins instance to another, or archiving old build jobs,
          you'll need to add or remove the corresponding build job
          directories in Jenkins’s <filename moreinfo="none">builds</filename>
          directory. You don’t need to take Jenkins offline to do this—you can
          simply use the “Reload Configuration from Disk” option to reload the
          Jenkins system and build job configurations directly. This process
          can be a little slow if there's a lot of build history, as Jenkins
          loads not only the build configurations but also all of the
          historical data as well.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Manage Plugins</term>
        <listitem>
          <para><indexterm id="I_indexterm4_d1e4192" significance="normal"><primary>configuration</primary><secondary>Manage Plugins screen</secondary></indexterm><indexterm id="I_indexterm4_d1e4197" significance="normal"><primary>Manage Plugins screen</primary></indexterm><indexterm id="I_indexterm4_d1e4200" significance="normal"><primary>plugins</primary><secondary>managing</secondary></indexterm>One of the best features of Jenkins is its extensible
          architecture. There's a large ecosystem of third-party open source
          plugins available, enabling you to add extra features to your build
          server, from support for different SCM tools such as Git, Mercurial,
          or ClearCase, to code quality and code coverage metrics reporting.
          We'll be looking at many of the more popular and useful plugins
          throughout this book. Plugins can be installed, updated, and removed
          through the Manage Plugins screen. Note that removing plugins needs
          to be done with some care, as it can sometimes affect the stability
          of your Jenkins instance—we'll look at this in more detail in
          <xref linkend="sect-maint-migrating-jobs"/>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>System Information</term>
        <listitem>
          <para><indexterm id="I_indexterm4_d1e4213" significance="normal"><primary>configuration</primary><secondary>System Information screen</secondary></indexterm><indexterm id="I_indexterm4_d1e4218" significance="normal"><primary>System Information screen</primary></indexterm>This screen displays a list of all the current Java
          system properties and system environment variables. Here, you can
          check exactly what version of Java Jenkins is running in, what user
          it's running under, and so forth. You can also check that Jenkins
          is using the correct environment variable settings. Its main use is
          for <phrase role="keep-together">troubleshooting</phrase>, so that
          you can make sure that your server is running with the system
          properties and variables you think it is.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>System Log</term>
        <listitem>
          <para><indexterm id="I_indexterm4_d1e4230" significance="normal"><primary>configuration</primary><secondary>System Log screen</secondary></indexterm><indexterm id="I_indexterm4_d1e4235" significance="normal"><primary>System Log screen</primary></indexterm>The System Log screen is a convenient way to view the
          Jenkins log files in real time. Again, the main use of this screen
          is for troubleshooting.</para>
          <para>You can also subscribe to RSS feeds for various levels of log
          messages. For example, as a Jenkins administrator, you might want to
          subscribe to all the ERROR and WARNING log messages.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Load Statistics</term>
        <listitem>
          <para><indexterm id="I_indexterm4_d1e4246" significance="normal"><primary>configuration</primary><secondary>Load Statistics screen</secondary></indexterm><indexterm id="I_indexterm4_d1e4251" significance="normal"><primary>Load Statistics screen</primary></indexterm>Jenkins keeps track of how busy your server is in
          terms of the number of concurrent builds and the length of the build
          queue (which gives an idea of how long your builds need to wait
          before being executed). These statistics can give you an idea of
          whether you need to add extra capacity or extra build nodes to your
          infrastructure.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Script Console</term>
        <listitem>
          <para><indexterm id="I_indexterm4_d1e4260" significance="normal"><primary>configuration</primary><secondary>Script Console</secondary></indexterm><indexterm id="I_indexterm4_d1e4265" significance="normal"><primary>Script Console screen</primary></indexterm><indexterm id="I_indexterm4_d1e4268" significance="normal"><primary>Groovy scripts</primary><secondary>running on Script Console</secondary></indexterm>This screen lets you run Groovy scripts on the server.
          It's useful for advanced troubleshooting: since it requires a
          strong knowledge of the internal Jenkins architecture, it's mainly
          useful for plugin developers and the like.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Manage Nodes</term>
        <listitem>
          <para><indexterm id="I_indexterm4_d1e4279" significance="normal"><primary>configuration</primary><secondary>Manage Nodes screen</secondary></indexterm><indexterm id="I_indexterm4_d1e4284" significance="normal"><primary>Manage Nodes screen</primary></indexterm>Jenkins handles parallel and distributed builds well.
          In this screen, you can configure how many builds you want Jenkins to
          run simultaneously. If you're using distributed builds, you can set
          up build nodes. A build node is another machine that Jenkins can use
          to execute its builds. We'll look at how to configure distributed
          builds in detail in <xref linkend="chapter-distributed-builds"/>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Prepare for Shutdown</term>
        <listitem>
          <para><indexterm id="I_indexterm4_d1e4295" significance="normal"><primary>configuration</primary><secondary>Prepare for Shut down screen</secondary></indexterm><indexterm id="I_indexterm4_d1e4300" significance="normal"><primary>Prepare for Shutdown screen</primary></indexterm>If you need to shut down Jenkins, or the server
          Jenkins is running on, it's best not to do so when a build is being
          executed. To shut down Jenkins cleanly, you can use the Prepare for
          Shutdown link, which prevents any new builds from being started.
          Eventually, when all of the current builds have finished, you'll
          be able to shut down Jenkins cleanly.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>We'll come back to some of these features in more detail later on
    in the book. In the following sections, we'll focus on how to configure
    the most important Jenkins system <indexterm id="I_indexterm4_d1e4306" class="endofrange" startref="ch04-config" significance="normal"><primary/></indexterm><indexterm id="I_indexterm4_d1e4308" class="endofrange" startref="ch04-manage" significance="normal"><primary/></indexterm>parameters.</para>
  </sect1>
  <sect1 id="sect-configuration-system">
    <title>Configuring the System Environment</title>
    <para>The <indexterm class="startofrange" id="ch04-configsys1" significance="normal"><primary>configuration</primary><secondary>Configure System screen</secondary></indexterm><indexterm class="startofrange" id="ch04-configsys2" significance="normal"><primary>Configure System screen</primary></indexterm>most important Jenkins administration page is the Configure
    System screen (<xref linkend="fig-configure-system"/>). Here, you set up
    most of the fundamental tools that Jenkins needs to do its daily work. The
    default screen contains a number of sections, each relating to a different
    configuration area or external tool. In addition, when you install
    plugins, their system-wide configuration is also often done in this
    screen.</para>
    <figure float="none" id="fig-configure-system">
      <title>System configuration in Jenkins</title>
      <mediaobject id="I_mediaobject4_d1e4330">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0402.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0402.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>The Configure System screen lets you define global parameters for
    your Jenkins installation, as well as external tools required for your
    build process. The first part of this screen lets you define some general
    system-wide parameters.</para>
    <para>The Jenkins <indexterm id="I_indexterm4_d1e4339" significance="normal"><primary>home directory for Jenkins</primary></indexterm><indexterm id="I_indexterm4_d1e4342" significance="normal"><primary>Jenkins</primary><secondary>home directory for</secondary></indexterm>home directory is displayed, for reference. This way, you
    can check at a glance that you're working with the home directory that
    you expect. Remember, you can change this directory by setting
    the<indexterm id="I_indexterm4_d1e4348" significance="normal"><primary>JENKINS_HOME environment variable</primary></indexterm> <literal moreinfo="none">JENKINS_HOME</literal> environment variable in
    your environment (see <xref linkend="sec-hudson-home-directory" os=""/>).</para>
    <para>The System Message field<indexterm id="I_indexterm4_d1e4359" significance="normal"><primary>Jenkins</primary><secondary>home page for</secondary></indexterm><indexterm id="I_indexterm4_d1e4364" significance="normal"><primary>home page</primary></indexterm><indexterm id="I_indexterm4_d1e4367" significance="normal"><primary>configuration</primary><secondary>system message on home page</secondary></indexterm> is useful for several purposes. This text is displayed at
    the top of your Jenkins home page. You can use HTML tags, so it's a
    simple way to customize your build server by including the name of your
    server and a short blurb describing its purpose. You can also use it to
    display messages for all users, such as to announce system outages and so
    on.</para>
    <para>The Quiet Period is <indexterm id="I_indexterm4_d1e4375" significance="normal"><primary>configuration</primary><secondary>quiet period before build starts</secondary></indexterm><indexterm id="I_indexterm4_d1e4380" significance="normal"><primary>build jobs</primary><secondary>delaying start of</secondary></indexterm><indexterm id="I_indexterm4_d1e4385" significance="normal"><primary>quiet period before build starts</primary></indexterm><indexterm id="I_indexterm4_d1e4388" significance="normal"><primary>CVS</primary><secondary>delaying build jobs</secondary></indexterm>useful for SCM tools like CVS that commit file changes one
    by one, rather than grouped together in a single atomic transaction.
    Normally, Jenkins will trigger a build as soon as it detects a change in
    the source repository. However, this doesn’t suit all environments. If you're
    using an SCM tool like CVS, you don’t want Jenkins kicking off a build
    as soon as the first change comes in, as the repository will be in an
    inconsistent state until all of the changes have been committed. You can
    use the Quiet Period field to avoid issues like this. If you set a value
    here, Jenkins will wait until no changes have been detected for the
    specified number of seconds before triggering the build. This helps to
    ensure that all of the changes have been committed and the repository is
    in a stable state before starting the build.</para>
    <para>For most modern version control systems, such as Subversion, Git, or
    Mercurial, commits are atomic. This means that changes in multiple files
    are submitted to the repository as a single unit, and the source code on
    the repository is guaranteed to be in a stable state at all times.
    However, some teams still use an approach where one logical change set is
    delivered in several commit operations. In this case, you can use the
    Quiet Period field to ensure that the build always uses a stable source
    code version.</para>
    <para>The Quiet Period value specified here is in fact the default
    system-wide value—if required, you can redefine this value individually
    for each project.</para>
    <para>You also manage user accounts and user rights here. By default,
    Jenkins lets any user do anything. If you want a more restrictive
    approach, you'll need to activate Jenkins security here using the Enable
    Security field. There are many ways to do this, and we look at this aspect
    of Jenkins<indexterm id="I_indexterm4_d1e4400" class="endofrange" startref="ch04-configsys1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm4_d1e4402" class="endofrange" startref="ch04-configsys2" significance="normal"><primary/></indexterm> later on (see <xref linkend="chapter-security"/>).</para>
  </sect1>
  <sect1 id="sect-configuration-global">
    <title>Configuring Global Properties</title>
    <para>The <indexterm class="startofrange" id="ch04-global1" significance="normal"><primary>configuration</primary><secondary>global properties</secondary></indexterm><indexterm class="startofrange" id="ch04-global2" significance="normal"><primary>global properties</primary></indexterm><indexterm class="startofrange" id="ch04-global3" significance="normal"><primary>properties</primary><secondary>global</secondary></indexterm><indexterm class="startofrange" id="ch04-global4" significance="normal"><primary>build jobs</primary><secondary>global properties for</secondary></indexterm>Global Properties (see <xref linkend="fig-configure-global-properties"/>) section lets you define
    variables that can be managed centrally but used in all of your build
    jobs. You can add as many properties as you want here, and use them in
    your build jobs. Jenkins will make them available within your build job
    environment, so you can freely use them within your Ant and Maven build
    scripts. Note that you shouldn’t put periods (“.”) in the property names,
    as they won’t be processed correctly. So, <literal moreinfo="none">ldapserver</literal> or
    <literal moreinfo="none">ldap_server</literal> is fine, but not
    <literal moreinfo="none">ldap.server</literal>.</para>
    <figure float="0" id="fig-configure-global-properties">
      <title>Configuring environment variables in Jenkins</title>
      <mediaobject id="I_mediaobject4_d1e4446">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0403.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0403.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>There are two ways you typically use these variables. Firstly, you
    can use them directly in your build script, using the
    <literal moreinfo="none">${key}</literal> or <literal moreinfo="none">$key</literal> notation (so
    <literal moreinfo="none">${ldapserver}</literal> or <literal moreinfo="none">$ldapserver</literal> in the
    example given above). This is the simplest approach, but means that there's
    a tight coupling between your build job configuration and your build
    scripts.</para>
    <para>If your script uses a different property name (one containing dots,
    for example), you can also pass the value to your build script in the
    build job configuration. In <xref linkend="fig-config-properties-in-job"/> you pass the
    <literal moreinfo="none">ldapserver</literal> property value defined in <xref linkend="fig-configure-global-properties"/> to a Maven build job. Using
    the <literal moreinfo="none">-D</literal> option means that this value will be accessible
    from within the build script. This is a flexible approach, as you can
    assign the global properties defined within Jenkins to script-specific
    variables in our build scripts. In <xref linkend="fig-config-properties-in-job"/>, for example, the
    <literal moreinfo="none">ldapserver</literal> property will be available from within the
    Maven build via the<indexterm id="I_indexterm4_d1e4483" class="endofrange" startref="ch04-global1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm4_d1e4485" class="endofrange" startref="ch04-global2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm4_d1e4487" class="endofrange" startref="ch04-global3" significance="normal"><primary/></indexterm><indexterm id="I_indexterm4_d1e4489" class="endofrange" startref="ch04-global4" significance="normal"><primary/></indexterm> internal <literal moreinfo="none">${ldapserver}</literal> property.</para>
    <figure float="none" id="fig-config-properties-in-job">
      <title>Using a configured environment variable</title>
      <mediaobject id="I_mediaobject4_d1e4498">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0404.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0404.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
  </sect1>
  <sect1 id="sect-configuration-jdks">
    <title>Configuring Your JDKs</title>
    <para><indexterm class="startofrange" id="ch04-jdk1" significance="normal"><primary>configuration</primary><secondary>JDK</secondary></indexterm><indexterm class="startofrange" id="ch04-jdk2" significance="normal"><primary>JDK (Java Development Kit)</primary><secondary>configuring multiple versions of</secondary></indexterm>Historically, one of the most common uses of Jenkins has
    been to build Java applications. So, Jenkins naturally provides excellent
    built-in support for Java.</para>
    <para>By default, Jenkins will build Java applications using whatever
    version of Java it finds on the system path, which is usually the version
    that Jenkins itself is running under. However, for a production build
    server, you'll probably want more control than this. For example, you
    may be running your Jenkins server under Java 6, for performance reasons.
    However, your production server might be running under Java 5 or even Java
    1.4. Large organizations are often cautious when it comes to upgrading
    Java versions in their production environments, and some of the more
    heavyweight application servers on the market are notoriously slow to be
    certified with the latest JDKs.</para>
    <para>In any case, it's always a wise practice to build your application
    using a version of Java that's close to the one running on your
    production server. While an application <phrase role="keep-together">compiled</phrase> with Java 1.4 will usually run fine
    under Java 6, the inverse isn't always true. Or, you may have different
    applications that need to be built using different versions of
    Java.</para>
    <para>Jenkins provides good support for working with multiple JVMs.
    Indeed, Jenkins makes it very easy to configure and use as many versions
    of Java as you want. Like most system-level configuration, you do this in
    the Configure System screen (see <xref linkend="fig-configure-system"/>).
    Here, you'll find a section called JDK which allows you to manage the
    JDK installations you need Jenkins to work with.</para>
    <para>The simplest way to declare a JDK installation is simply to supply
    an appropriate name (which will be used to identify this Java installation
    later on when you configure your builds), along with the path to the Java
    installation directory (the same path you'd use for the<indexterm id="I_indexterm4_d1e4531" significance="normal"><primary>JAVA_HOME environment variable</primary></indexterm> <literal moreinfo="none">JAVA_HOME</literal> variable), as shown in <xref linkend="fig-configure-jdk"/>. Although you need to type the path
    manually, Jenkins will check in real time both that the directory exists
    and that it looks like a valid JDK directory.</para>
    <figure float="none" id="fig-configure-jdk">
      <title>JDK configuration in Jenkins</title>
      <mediaobject id="I_mediaobject4_d1e4543">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0405.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0405.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>You can <indexterm id="I_indexterm4_d1e4550" significance="normal"><primary>installation</primary><secondary>JDK</secondary></indexterm><indexterm id="I_indexterm4_d1e4555" significance="normal"><primary>JDK (Java Development Kit)</primary><secondary>installing</secondary></indexterm>also ask Jenkins to install Java for you. In this case,
    Jenkins will download the JDK installation and install a copy on your
    machine (see <xref linkend="fig-configure-jdk-installers"/>). The first
    time a build needs to use this JDK, Jenkins will download and install the
    specified version of Java into the <filename moreinfo="none">tools</filename> directory in the Jenkins home directory.
    If the build is running on a new build agent that doesn’t have this JDK
    installed, it will download and install it onto the build agent machine as
    well.</para>
    <para>This<indexterm id="I_indexterm4_d1e4568" significance="normal"><primary>build agents</primary><secondary>configuring for multiple JDK versions</secondary></indexterm> is also a great way to configure build agents. As we’ll see
    later on in the book, Jenkins can delegate build jobs to other machines,
    or build agents. A build agent (or “slave”) is simply another computer
    that Jenkins can use to run some of its builds. If you use Jenkins’s
    Install automatically option, you don’t need to manually install all the
    JDK versions you need on the build agent machines—Jenkins will do it for
    you the first time it needs to.</para>
    <para>By default, Jenkins proposes to download the JDK from the Oracle
    website. If your Jenkins installation is behind a proxy server, you may
    need to configure your proxy settings to ensure that Jenkins can access
    the external download sites (see <xref linkend="sect-configuration-proxies"/>). Another option is to provide a
    URL pointing to your own internal copy of the JDK binaries (either in the
    form of a ZIP or a GZip-compressed TAR file), stored on a local server
    within your organization. This lets you provide standard installations on
    a local server and makes for faster automatic installations. When you use
    this option, Jenkins also lets you specify a label to restrict
    the use of this installation to the build nodes with this label. This is a
    useful technique if you need to install a specific version of a tool on
    certain build machines. The same approach can also be used for other build
    tools (such as Maven and Ant).</para>
    <figure float="0" id="fig-configure-jdk-installers">
      <title>Installing a JDK automatically</title>
      <mediaobject id="I_mediaobject4_d1e4581">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0406.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0406.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>The automatic installer won't work in all environments (if it
    can’t find or identify your operating system to its satisfaction, for
    example, the installation will fail), but it's nevertheless a useful and
    convenient way to set up new build servers or distributed build agents in
    a <indexterm id="I_indexterm4_d1e4589" class="endofrange" startref="ch04-jdk1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm4_d1e4591" class="endofrange" startref="ch04-jdk2" significance="normal"><primary/></indexterm>consistent manner.</para>
  </sect1>
  <sect1 id="sect-configuration-build-tools">
    <title>Configuring Your Build Tools</title>
    <para>Build tools<indexterm class="startofrange" id="ch04-tool1" significance="normal"><primary>configuration</primary><secondary>build tools</secondary></indexterm><indexterm class="startofrange" id="ch04-tool2" significance="normal"><primary>build tools, configuring</primary></indexterm> are the bread-and-butter of any build server, and Jenkins
    is no exception. Out of the box, Jenkins supports three principal build
    tools: Ant, Maven, and the basic shell-script (or batch script in
    Windows). Using Jenkins plugins, you can also add support for other build
    tools and other languages, such as Gant, Grails, MSBuild, and many
    more.</para>
    <sect2>
      <title>Maven</title>
      <para><indexterm class="startofrange" id="ch04-maven1" significance="normal"><primary>configuration</primary><secondary>Maven</secondary></indexterm><indexterm class="startofrange" id="ch04-maven2" significance="normal"><primary>Maven</primary><secondary>configuring</secondary></indexterm>Maven is a high-level build scripting framework for Java
      that uses notions such as a standard directory structure and standard
      life cycles, Convention over Configuration, and Declarative Dependency
      Management to simplify a lot of the low-level scripting that you find in
      a typical Ant build script. In Maven, your project uses a standard,
      well-defined build life cycle—compile, test, package, deploy, and so
      forth. Each life cycle phase is associated with a Maven plugin. The
      various Maven plugins use the standard directory structure to carry out
      these tasks with a minimum of intervention on your part. You can also
      extend Maven by overriding the default plugin configurations or by
      invoking additional plugins.</para>
      <para>Jenkins <indexterm id="I_indexterm4_d1e4625" significance="normal"><primary>Maven</primary><secondary>installing</secondary></indexterm><indexterm id="I_indexterm4_d1e4630" significance="normal"><primary>installation</primary><secondary>Maven</secondary></indexterm>provides excellent support for Maven, and has a good
      understanding of Maven project structures and dependencies. You can
      either get Jenkins to install a specific version of Maven automatically
      (as we're doing with Maven 3 in the example), or provide a path to a
      local Maven installation (see <xref linkend="fig-configure-maven" os=""/>). You can configure as many versions of Maven for your build
      projects as you want, and use different versions of Maven for different
      projects.</para>
      <figure float="none" id="fig-configure-maven">
        <title>Configuring Maven in Jenkins</title>
        <mediaobject id="I_mediaobject4_d1e4641">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0407.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0407.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>If you tick the Install automatically checkbox, Jenkins will
      download and install the requested version of Maven for you. You can
      either ask Jenkins to download Maven directly from the Apache site, or
      from a (presumably local) URL of your choice. This is an excellent
      choice when you're using distributed builds, and, since Maven is
      cross-platform, it will work on any machine. You don’t need to install
      Maven explicitly on each build machine—the first time a build machine
      needs to use Maven, it will download a copy and install it to the
      <filename moreinfo="none">tools</filename> directory in the Jenkins home
      directory.</para>
      <para>Sometimes you need to pass Java system options to your Maven build
      process. For instance it's often useful to give Maven a bit of extra
      memory for heavyweight tasks such as code coverage or site generation.
      Maven lets you do this by setting the <code>MAVEN_OPTS</code> variable.
      In Jenkins, you can set a system-wide default value, to be used across
      all projects (see <xref linkend="fig-configure-mvnopts"/>). This comes
      in handy if you want to use certain standard memory options (for
      example) across all projects, without having to set it up in each
      project by<indexterm id="I_indexterm4_d1e4658" class="endofrange" startref="ch04-maven1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm4_d1e4660" class="endofrange" startref="ch04-maven2" significance="normal"><primary/></indexterm> hand.</para>
      <figure float="none" id="fig-configure-mvnopts">
        <title>Configuring system-wide MVN_OPTS</title>
        <mediaobject id="I_mediaobject4_d1e4666">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0408.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0408.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
    <sect2 id="hudson-config-ant">
      <title>Ant</title>
      <para><indexterm class="startofrange" id="ch04-ant1" significance="normal"><primary>configuration</primary><secondary>Ant</secondary></indexterm><indexterm class="startofrange" id="ch04-ant2" significance="normal"><primary>Ant</primary><secondary>configuring</secondary></indexterm><indexterm class="startofrange" id="ch06-ant3" significance="normal"><primary>Ant</primary></indexterm>Ant is a widely-used and very well-known build scripting
      language for Java. It's a flexible, extensible, relatively low-level
      scripting language used in a large number of open source projects. An
      Ant build script (typically called <filename moreinfo="none">build.xml</filename>) is made up of a number of
      <emphasis>targets</emphasis>. Each target performs a particular job in
      the build process, such as compiling your code or running your unit
      tests. It does so by executing <emphasis>tasks</emphasis>, which carry
      out a specific part of the build job, such as invoking <command moreinfo="none">javac</command> to compile your code, or creating a new
      directory. Targets also have <emphasis>dependencies</emphasis>,
      indicating the order in which your build tasks need to be executed. For
      example, you need to compile your code before you can run your unit
      tests.</para>
      <para>Jenkins provides excellent build-in support for Ant—you can invoke
      Ant targets from your build job, providing properties to customize the
      process as required. We look at how to do this in detail later on in
      this book.</para>
      <para>If Ant is available on the system path, Jenkins will find it.
      However, if you want to know precisely what version of Ant you're
      using, or if you need to be able to use several different versions of
      Ant on different build jobs, you can configure as many version of
      Ant as required (see <xref linkend="fig-configure-ant"/>). Just provide
      a name and installation directory for each version of Ant in the Ant
      section of the Configure System screen. You'll then be able to choose
      what version of Ant you want to use for each project.</para>
      <para>If you're<indexterm id="I_indexterm4_d1e4713" significance="normal"><primary>Ant</primary><secondary>installing</secondary></indexterm><indexterm id="I_indexterm4_d1e4718" significance="normal"><primary>installation</primary><secondary>Ant</secondary></indexterm> tick the Install automatically checkbox, Jenkins will
      download and install Ant into the <filename moreinfo="none">tools</filename> directory of your Jenkins home
      directory, just like it does for Maven. It will download an Ant
      installation the first time a build job needs to use Ant, either from
      the Apache website or from a local URL. Again, this is a great way to
      standardize <phrase role="keep-together">build servers</phrase> and make
      it easier to add new distributed build servers to an existing <phrase role="keep-together">infrastructure</phrase>.<indexterm id="I_indexterm4_d1e4733" class="endofrange" startref="ch06-ant3" significance="normal"><primary/></indexterm><indexterm id="I_indexterm4_d1e4736" class="endofrange" startref="ch04-ant1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm4_d1e4738" class="endofrange" startref="ch04-ant2" significance="normal"><primary/></indexterm></para>
      <figure float="0" id="fig-configure-ant">
        <title>Configuring Ant in Jenkins</title>
        <mediaobject id="I_mediaobject4_d1e4743">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0409.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0409.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
    <sect2>
      <title>Shell-Scripting Language</title>
      <para>If you're<indexterm id="I_indexterm4_d1e4753" significance="normal"><primary>shell scripts</primary></indexterm><indexterm id="I_indexterm4_d1e4756" significance="normal"><primary>scripts</primary><secondary>shell scripts</secondary></indexterm> running your build server on Unix or Linux, Jenkins
      lets you insert shell scripts into your build jobs. This is handy for
      performing low-level, OS-related tasks that you don’t want to do in Ant
      or Maven. In the Shell section, you define the default shell that will
      be used when executing these shell scripts. By default, this is
      <filename moreinfo="none">/bin/sh</filename>, but there are times you
      may want to modify this to another command interpreter such as <filename moreinfo="none">bash</filename> or <filename moreinfo="none">Perl</filename>.</para>
      <para>In <indexterm id="I_indexterm4_d1e4773" significance="normal"><primary>batch scripts</primary></indexterm><indexterm id="I_indexterm4_d1e4776" significance="normal"><primary>scripts</primary><secondary>batch scripts</secondary></indexterm>Windows, the Shell section doesn't apply—you use Windows
      batch scripting instead. So, on a Windows build server, you should
      leave<indexterm id="I_indexterm4_d1e4782" class="endofrange" startref="ch04-tool1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm4_d1e4784" class="endofrange" startref="ch04-tool2" significance="normal"><primary/></indexterm> this field blank.</para>
    </sect2>
  </sect1>
  <sect1 id="sect-configuration-scm">
    <title>Configuring Your Version Control Tools</title>
    <para><indexterm class="startofrange" id="ch04-vc1" significance="normal"><primary>configuration</primary><secondary>version control systems</secondary></indexterm><indexterm class="startofrange" id="ch04-vc2" significance="normal"><primary>version control systems</primary><secondary>configuring</secondary></indexterm><indexterm class="startofrange" id="ch04-vc3" significance="normal"><primary>version control systems</primary><secondary>supported by Jenkins</secondary></indexterm><indexterm id="I_indexterm4_d1e4806" significance="normal"><primary>version control systems</primary><seealso>CVS; Git; Subversion</seealso></indexterm>Jenkins comes preinstalled with plugins for CVS and
    Subversion. Other version control systems are supported by plugins that
    you can download from the Manage Plugins screen.</para>
    <sect2>
      <title>Configuring Subversion</title>
      <para><indexterm id="I_indexterm4_d1e4816" significance="normal"><primary>configuration</primary><secondary>Subversion</secondary></indexterm><indexterm id="I_indexterm4_d1e4821" significance="normal"><primary>Subversion</primary><secondary>configuring</secondary></indexterm>Subversion needs no special configuration, since Jenkins
      uses native Java libraries to interact with Subversion repositories. If
      you need to authenticate to connect to a repository, Jenkins will prompt
      you when you enter the Subversion URL in the build job
      configuration.</para>
    </sect2>
    <sect2>
      <title>Configuring CVS</title>
      <para>CVS <indexterm id="I_indexterm4_d1e4832" significance="normal"><primary>CVS</primary><secondary>configuring</secondary></indexterm><indexterm id="I_indexterm4_d1e4837" significance="normal"><primary>configuration</primary><secondary>CVS</secondary></indexterm>needs little or no configuration. By default, Jenkins will
      look for tools like CVS on the system path, though you can provide the
      path explicitly if it isn’t on the system path. CVS keeps login and
      password details in a file called <filename moreinfo="none">.cvspass</filename>, which is usually in your home
      directory. If it isn't, you can provide a path where Jenkins
      can find<indexterm id="I_indexterm4_d1e4846" class="endofrange" startref="ch04-vc1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm4_d1e4848" class="endofrange" startref="ch04-vc2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm4_d1e4850" class="endofrange" startref="ch04-vc3" significance="normal"><primary/></indexterm> this file.</para>
    </sect2>
  </sect1>
  <sect1 id="sect-configuration-email">
    <title>Configuring the Mail Server</title>
    <para><indexterm class="startofrange" id="ch04-email1" significance="normal"><primary>configuration</primary><secondary>email server</secondary></indexterm><indexterm class="startofrange" id="ch04-email2" significance="normal"><primary>email server, configuring</primary></indexterm><indexterm class="startofrange" id="ch04-email3" significance="normal"><primary>mail server, configuring</primary></indexterm>The last of the basic configuration options you need to set
    up is the email server configuration. Email is Jenkins’s most fundamental
    notification technique—when a build fails, it will send an email message
    to the developer who committed the changes, and optionally to other team
    members as well. So, Jenkins needs to know about your email server (see
    <xref linkend="fig-configure-email"/>).</para>
    <figure float="none" id="fig-configure-email">
      <title>Configuring an email server in Jenkins</title>
      <mediaobject id="I_mediaobject4_d1e4874">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0410.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0410.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>The System Admin email address is the address from which the
    notification messages are sent. You can also use this field to check the
    email setup—if you click on the Test configuration button, Jenkins will
    send a test email to this address.</para>
    <para>In many organizations, you can derive a user’s email address from
    their login by adding the organization domain name. For example, at ACME,
    user John Smith will have a login of “jsmith" and an email address of
    “jsmith@acme.com”. If this extends to your version control system, Jenkins
    can save you a lot of configuration effort in this area. In the previous
    example, you could simply specify the default user email suffix of
    acme.com and Jenkins will figure out the rest.</para>
    <para>You also need to provide a proper base URL for your Jenkins server
    (one that doesn't use localhost). Jenkins uses this URL in the email
    notifications so that users can go directly from the email to the build
    failure screen on Jenkins.</para>
    <para>Jenkins also provides for more sophisticated email configuration,
    using more advanced features such as SMTP authentication and SSL. If you
    need these, click on the Advanced button to configure these
    options.</para>
    <para><indexterm id="I_indexterm4_d1e4888" significance="normal"><primary>Gmail, configuring</primary></indexterm>For example, many organizations use Google Apps for their
    email service. You can configure Jenkins to work with the Gmail service
    as shown in <xref linkend="fig-configure-gmail" os=""/>. All you need to
    do in this case is to use the Gmail SMTP server and provide your Gmail
    username and password in the SMTP Authentication (you also need to use SSL
    and the non-standard <indexterm id="I_indexterm4_d1e4894" class="endofrange" startref="ch04-email1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm4_d1e4896" class="endofrange" startref="ch04-email2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm4_d1e4898" class="endofrange" startref="ch04-email3" significance="normal"><primary/></indexterm>port of 465).</para>
    <figure float="none" id="fig-configure-gmail">
      <title>Configuring an email server in Jenkins to use a Google Apps
      domain</title>
      <mediaobject id="I_mediaobject4_d1e4904">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0411.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0411.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
  </sect1>
  <sect1 id="sect-configuration-proxies">
    <title>Configuring a Proxy</title>
    <para><indexterm class="startofrange" id="ch04-proxy1" significance="normal"><primary>proxy, configuring</primary></indexterm><indexterm class="startofrange" id="ch04-proxy2" significance="normal"><primary>configuration</primary><secondary>proxy</secondary></indexterm>In most enterprise environments, your Jenkins server will be
    situated behind a firewall, and won't have direct access to the
    Internet. Jenkins needs Internet access to download plugins and updates,
    and also to install tools such as the JDK, Ant, and Maven from remote
    sites. If you need to go through an HTTP proxy server<indexterm id="I_indexterm4_d1e4922" significance="normal"><primary>HTTP proxy server</primary></indexterm> to get to the Internet, you can configure the connection
    details (the server and port, and, if required, the <phrase role="keep-together">username</phrase> and password) in the Advanced tab
    on the Plugin Manager screen (see <phrase role="keep-together"><xref linkend="fig-configuration-proxy"/></phrase>).</para>
    <para>If your proxy is using Microsoft’s <indexterm id="I_indexterm4_d1e4934" significance="normal"><primary>NTLM proxy authentication</primary></indexterm>NTLM authentication scheme, then you'll need to provide a
    domain name as well as a username. You can place both in the User name
    field: just enter the domain name, followed by a back-slash (\), followed
    by the username, such as “MyDomain\Joe Bloggs”.</para>
    <figure float="none" id="fig-configuration-proxy">
      <title>Configuring Jenkins to use a proxy</title>
      <mediaobject id="I_mediaobject4_d1e4941">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0412.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0412.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Finally, if you're setting up Proxy access on your Jenkins build
    server, remember that all of the other tools running on this server will
    need to know about the proxy as well. In particular, this may include
    tools such as Subversion (if you're accessing an external repository) and
    Maven (if you're not using an Enterprise Repository <indexterm id="I_indexterm4_d1e4948" class="endofrange" startref="ch04-proxy1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm4_d1e4950" class="endofrange" startref="ch04-proxy2" significance="normal"><primary/></indexterm>Manager).</para>
  </sect1>
  <sect1 id="I_sect14_d1e4953">
    <title id="sect-configuration-conclusion">Conclusion</title>
    <para>You don’t need a great deal of configuration to get started with
    Jenkins. The configuration that's required is fairly straightforward, and
    is centralised in the Configure System screen. Once this is done, you're
    ready to create your first Jenkins build job!</para>
  </sect1>
</chapter>
